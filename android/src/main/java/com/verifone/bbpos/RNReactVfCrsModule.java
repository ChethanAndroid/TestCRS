
package com.verifone.bbpos;

import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Build;
import android.os.Environment;
import android.util.Log;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.RequiresApi;

import com.bbpos.bbdevice.ota.BBDeviceOTAController;
import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.LifecycleEventListener;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.bbpos.bbdevice.BBDeviceController;
import com.bbpos.bbdevice.CAPK;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.WritableArray;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.bridge.WritableNativeMap;
import com.facebook.react.modules.core.DeviceEventManagerModule;
import com.google.gson.Gson;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;

public class RNReactVfCrsModule extends ReactContextBaseJavaModule {

  private static ReactApplicationContext reactContext;

    String copyPath = "G:\\Girmiti\\ReactNativeProjects\\BBPOS\\bbpos-integration\\android\\app\\src\\main\\assets\\WPS32_Firmware_VFZZ_v4.01.00.08.hex";
    String absoluteRoot="G:\\Girmiti\\ReactNativeProjects\\BBPOS\\bbpos-integration\\android\\app\\src\\main\\assets\\WPS32_Firmware_VFZZ_v4.01.00.08.hex";
    String contentRoot="src\\main\\assets\\WPS32_Firmware_VFZZ_v4.01.00.08.hex";
    String sourceRoot="WPS32_Firmware_VFZZ_v4.01.00.08.hex";

    private static String repositoryPath="android/app/src/main/assets/WPS32_Firmware_VFZZ_v4.01.00.08.hex";

    private static String dekBDK = "000111222333444555666777888999AAABBBCCCDDDEEEFFF";

    static State state = State.IDLE;

    private enum State {
        IDLE,
        DISCONNECTED,
        RECONNECTING,
        OTA,
        OTA_RECONNECTING,
        FIRMWARE
    }

    public static final String[] DEVICE_NAMES = new String[] { "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R",
            "S", "T", "U", "V", "W", "X", "Y", "Z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" };
    public static final String BBPOS_DEVICE_NAME = "CHB";
    public static final String DEVICES = "devices";
    public static final String ON_BT_RETURN_SCAN_RESULTS = "onBTReturnScanResults";
    public static final String CONNECTED_DEVICE = "connectedDevice";
    public static final String ON_BT_CONNECTED = "onBTConnected";
    public static final String ON_BT_DISCONNECTED = "onBTDisconnected";
    public static final String ON_BT_DEVICE_HERE = "onDeviceHere";
    public static final String DISCONNECTED = "disconnected";
    public static final String DEVICE_HERE = "deviceHere";
    public static final String ON_REQUEST_DISPLAY_TEXT = "onRequestDisplayText";
    public static final String ON_RETURNE_OTA_PROGRESS = "onReturnOTAProgress";
    public static final String DISPLAY_TEXT = "displayText";
    public static final String ON_WAITING_FOR_CARD =  "onWaitingForCard";
    public static final String CHECK_CARD_MODE = "checkCardMode";
    public static final String ON_RETURN_BATCH_DATA = "onReturnBatchData";
    public static final String BATCH_DATA = "batchData";
    public static final String ON_RETURN_TRANSACTION_RESULT = "onReturnTransactionResult";
    public static final String ON_RETURN_EMV_CARD_DATA_RESULT = "onReturnEmvCardDataResult";
    public static final String ON_RETURN_CHECK_CARD_RESULT = "onReturnCheckCardResult";
    public static final String TRANSACTION_RESULT = "transactionResult";
    public static final String EMV_CARD_RESULT = "emvCardResult";
    public static final String CARD_RESULT ="cardResult";
    public static final String ON_DEVICE_INFO = "onDeviceInfo";
    public static final String ON_RETURN_DEVICE_INFO = "onReturnDeviceInfo";
    public static final String CURRENCY_CHARACTERS = "currencyCharacters";
    public static final String TERMINAL_TIME = "terminalTime";
    public static final String EMV_OPTION = "emvOption";
    public static final String ORDER_ID = "orderID";
    public static final String RANDOM_NUMBER = "randomNumber";
    public static final String CURRENCY_CODE = "currencyCode";
    public static final String TRANSACTION_TYPE = "transactionType";
    public static final String AMOUNT = "amount";
    public static final int SCAN_TIMEOUT = 120; // 2 minutes
    public static final String ON_RETURN_CANCEL_CHECK_CARD = "onReturnCancelCheckCardResult";
    public static final String ON_RETURN_PIN_ENTRY_RESULT = "onReturnPinEntryResult";
    public static final String ON_REQUEST_PIN_ENTRY = "onRequestPinEntry";
    public static final String ON_RETURN_REMOTE_FIRMWARE_UPDATE = "onReturnRemoteFirmwareUpdateResult";
    public static final String ON_RETURN_REMOTE_CONFIG_UPDATE = "onReturnRemoteConfigUpdateResult";


    public static final String ON_RETURN_SET_FIRMWARE_TARGET_VERSION_RESULT = "onReturnSetFirmwareTargetVersionResult";
    public static final String ON_RETURN_SET_CONFIG_TARGET_VERSION_RESULT = "onReturnSetConfigTargetVersionResult";

    private static final String OTA_SERVER_URL = "https://api.emms.bbpos.com/";
    private static String otaServerUrl = OTA_SERVER_URL;
    private static String vendorID = "bbpos1";
    private static String vendorSecret = "bbpos1";
    private static String appID = "bbpos2";
    private static String appSecret = "bbpos2";
    private static String deviceSettingVersion = "BBZZ_GEN_v3";
    private static String terminalSettingVersion = "BBZZ_GEN_v3";
    private static String mainProcessorVersion = "x.x.x";
    private static String coprocessorVersion = "x.x.x";
    private static String keyProfileName = "Test Key - 1";
    private static String targetVersionType = "FIRMWARE";



    Gson gson;
    BluetoothAdapter mBluetoothAdapter;
    BBDeviceController bbDeviceController;
    static BBDeviceControllerListener controllerListener;
    BBDeviceController.CheckCardMode checkCardMode;

    BBDeviceOTAController bbDeviceOTAController;
    static BBDeviceOTAControllerListener otaControllerListener;

    String updateStaus = "";

  public RNReactVfCrsModule(ReactApplicationContext reactContext) {
    super(reactContext);
     reactContext = context;
        gson = new Gson();
  }

  @Override
  public String getName() {
    return "RNReactVfCrs";
  }

  
    public void reactContextInit(){

        //BBDevice Controller init
        BBDeviceController.setDebugLogEnabled(true);
        controllerListener = new BBDeviceControllerListener();
        bbDeviceController = BBDeviceController.getInstance(reactContext, controllerListener);

        //OTA init
        BBDeviceOTAController.setDebugLogEnabled(true);
        otaControllerListener = new BBDeviceOTAControllerListener();
        bbDeviceOTAController = BBDeviceOTAController.getInstance(reactContext,otaControllerListener);

        try {
            bbDeviceOTAController.setBBDeviceController(bbDeviceController);
        } catch(Exception e) {
            String content = e.toString() + "\n";
            StackTraceElement[] elements = e.getStackTrace();
            for(int i = 0; i < elements.length; ++i) {
                content += elements[i].toString() + "\n";
            }
        }

        bbDeviceOTAController.setOTAServerURL(otaServerUrl);


        reactContext.addLifecycleEventListener(new LifecycleEventListener() {
            @Override
            public void onHostResume() {

            }

            @Override
            public void onHostPause() {

            }

            @Override
            public void onHostDestroy() {
                if (bbDeviceController.getConnectionMode() == BBDeviceController.ConnectionMode.BLUETOOTH) {
                    bbDeviceController.disconnectBT();
                }
                //release the resources
                bbDeviceController.releaseBBDeviceController();
                // bbDeviceController = null;
                // controllerListener = null;
            }
        });

    }

  @ReactMethod
  public void resultMethod(Promise promise){
    System.out.println("result:"+promise);
    promise.resolve(true);
  }

    @ReactMethod
    public void scan(Promise promise){
        reactContextInit();
        try {
            bbDeviceController.startBTScan(DEVICE_NAMES, SCAN_TIMEOUT);
            promise.resolve(true);
        } catch (Exception e) {
            promise.reject(e);
        }
    }

    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR2)
    @ReactMethod
    public void connect(String address, Promise promise){
        Log.d("OTA", "addtress"+address);
        reactContextInit();
        try{
            final BluetoothManager bluetoothManager =
                    (BluetoothManager) reactContext.getSystemService(reactContext.BLUETOOTH_SERVICE);
            mBluetoothAdapter = bluetoothManager.getAdapter();

            BluetoothDevice device = mBluetoothAdapter.getRemoteDevice(address);

            bbDeviceController.stopBTScan();
            bbDeviceController.connectBT(device);
            promise.resolve(device.getName());
        }catch (Exception e){
            promise.reject(e);
        }
    }


    @ReactMethod
    public void stopScan(){
        reactContextInit();
        try {
            bbDeviceController.stopBTScan();
        }catch (Exception e){

        }
    }

    @ReactMethod
    public void isBTConnected(Promise promise){
        reactContextInit();
        try {
            if (bbDeviceController.getConnectionMode() == BBDeviceController.ConnectionMode.BLUETOOTH) {
                bbDeviceController.isDeviceHere();
                promise.resolve(true);
            }else {
                promise.resolve(false);
            }
        } catch (Exception e) {
            promise.reject(e);
        }
    }

    @ReactMethod
    public void isBTDisconnect(Promise promise){
        reactContextInit();
        try{
            if (bbDeviceController.getConnectionMode() == BBDeviceController.ConnectionMode.BLUETOOTH) {
                bbDeviceController.disconnectBT();

                //release the resources
                bbDeviceController.releaseBBDeviceController();

                promise.resolve(true);
            } else{
                promise.resolve(false);
            }
        }catch (Exception e){
            promise.reject(e);
        }
    }

    @ReactMethod
    public void BTDisconnect(Promise promise){
        reactContextInit();
        try{
            if (bbDeviceController.getConnectionMode() == BBDeviceController.ConnectionMode.BLUETOOTH) {
                bbDeviceController.disconnectBT();

                //release the resources
                bbDeviceController.releaseBBDeviceController();

                promise.resolve(true);
            } else{
                promise.resolve(false);
            }
        }catch (Exception e){
            promise.reject(e);
        }
    }

    @ReactMethod
    public void startEMV(String amount, String orderId, String currencyCode,Promise promise){
        reactContextInit();
        try {
            Hashtable<String, Object> data = new Hashtable<String, Object>();
            BBDeviceController.DisplayText[] displayTexts = new BBDeviceController.DisplayText[]{BBDeviceController.DisplayText.REMOVE_CARD};
            BBDeviceController.CurrencyCharacter[] currencyCharacters= new BBDeviceController.CurrencyCharacter[]{};
            if(currencyCode.equals("USD")){
                currencyCharacters = new BBDeviceController.CurrencyCharacter[]{BBDeviceController.CurrencyCharacter.DOLLAR};
                data.put(CURRENCY_CODE, "840");
            }else if(currencyCode.equals("EURO")) {
                currencyCharacters = new BBDeviceController.CurrencyCharacter[]{BBDeviceController.CurrencyCharacter.EURO};
                data.put(CURRENCY_CODE, "978");
            }else if(currencyCode.equals("POUND")) {
                currencyCharacters = new BBDeviceController.CurrencyCharacter[]{BBDeviceController.CurrencyCharacter.POUND};
                data.put(CURRENCY_CODE, "826");
            }
            BBDeviceController.TransactionType transactionType = BBDeviceController.TransactionType.GOODS;
            String terminalTime = new SimpleDateFormat("yyMMddHHmmss").format(Calendar.getInstance().getTime());
            String randomNo = "0123456789";
            data.put(CURRENCY_CHARACTERS, currencyCharacters);
            data.put(TERMINAL_TIME, terminalTime);
            data.put(EMV_OPTION, BBDeviceController.EmvOption.START);
            data.put(ORDER_ID, orderId);
            data.put(RANDOM_NUMBER, randomNo);
            //data.put(CURRENCY_CODE, currencyCode);
            data.put(TRANSACTION_TYPE, transactionType);
            data.put(AMOUNT, amount);
            // data.put("pinBypass", "000000");

            checkCardMode = BBDeviceController.CheckCardMode.SWIPE_OR_INSERT_OR_TAP;

            data.put(CHECK_CARD_MODE, checkCardMode);

            bbDeviceController.startEmv(data);
            promise.resolve(true);
        }catch (Exception e){
            promise.reject(e);
        }

    }

    @ReactMethod
    public void getEmvCardData(Promise promise){
        reactContextInit();
        try{
            bbDeviceController.getEmvCardData();
            promise.resolve(true);
        }catch (Exception e){
            promise.reject(e);
        }

    }

    @ReactMethod
    public void cancelCheckCard(){
        reactContextInit();
        try {
            bbDeviceController.cancelCheckCard();
        }catch (Exception e){
        }
    }

    @ReactMethod
    public void getApiVersion(Promise promise){
        reactContextInit();
        try{
            String apiVersion = BBDeviceController.getApiVersion();
            promise.resolve(apiVersion);
        }catch(Exception e){
            promise.reject(e);
        }
    }

    @ReactMethod
    public void getDeviceInfo(Promise promise){
        reactContextInit();
        try{
            bbDeviceController.getDeviceInfo();
            promise.resolve(true);
        }catch(Exception e){
            promise.reject(e);
        }
    }

    @ReactMethod
    public void changeLanguage(String lstate,Promise promise){
        reactContextInit();

        try {
            Hashtable<String, Object> data = new Hashtable<String, Object>();
            data.put("language", lstate);
            bbDeviceController.updateDisplaySettings(data);
            promise.resolve(true);
        }catch (Exception ex) {
            promise.reject(ex);
        }
    }

    @ReactMethod
    public void changeLogo(Promise promise) {
        reactContextInit();
        try{
            Hashtable<String, Object> image = new Hashtable<String, Object>();
            String dataStr = "";
            //actual bbpos1
            //String dataStr
            //actual bbpos1
            //dataStr

            //3 data + 80 zeroes  = blur verifone
            dataStr

            File sd = Environment.getExternalStorageDirectory();
            if (dataStr.startsWith(sd.getAbsolutePath())) {
                File targetImage = new File(dataStr);
                BitmapFactory.Options bmOptions = new BitmapFactory.Options();
                Bitmap bitmap = BitmapFactory.decodeFile(targetImage.getAbsolutePath(), bmOptions);
            } else {
                image.put("data", dataStr);
            }

            //actual
            image.put("foregroundColor", "0100000000004001F000FFFF0000");
            image.put("backgroundColor", "0100000000004001F000E73F0000");

            Hashtable<String, Object> data = new Hashtable<String, Object>();
            if (image.size() > 0) {
                data.put("image", image);
            }

            bbDeviceController.updateDisplaySettings(data);
            promise.resolve(true);

        } catch (Exception ex){
            promise.reject(ex);
        }

    }

    @ReactMethod
    public void checkCard(Promise promise){
        reactContextInit();
        try{

            Hashtable<String, Object> data = new Hashtable<String, Object>();
            data.put("checkCardMode", checkCardMode.TAP);
            data.put("checkCardTimeout", 0);
            data.put("cardType", 0);
            bbDeviceController.checkCard(data);
            promise.resolve(true);
        }catch (Exception ex){
            promise.reject(ex);
        }
    }

    @ReactMethod
    public void cancelPin(Promise promise){
        reactContextInit();
        try{
            bbDeviceController.cancelPinEntry();
            promise.resolve(true);
        }catch (Exception ex){
            promise.resolve(ex);
        }
    }

    @ReactMethod
    public void otaGetAPIVersion(Promise promise){

        reactContextInit();

        try{
            String apiVersion = BBDeviceOTAController.getApiVersion();
            promise.resolve(apiVersion);
            Toast.makeText(reactContext, "OTA Version: \t"+apiVersion, Toast.LENGTH_SHORT).show();
        }catch(Exception e){
            promise.reject(e);
        }

    }

    @ReactMethod
    public void remoteKeyInjection(Promise promise){
        reactContextInit();
        Hashtable<String, Object> input = new Hashtable<String, Object>();
        input.put("vendorID", vendorID);
        input.put("appID", appID);
        input.put("vendorSecret", vendorSecret);
        input.put("appSecret", appSecret);

        System.out.println("before try:"+input.get("vendorID"));
        System.out.println("before try:"+bbDeviceOTAController.getBBDeviceOTAControllerState());

        try {
//            createProgressDialog(R.string.remote_key_injection);
            bbDeviceOTAController.startRemoteKeyInjection(input);

            Toast.makeText(reactContext, "remote injection:"+input, Toast.LENGTH_SHORT).show();

            System.out.println("try remote injection :"+input);

        } catch (Exception e) {
            String content = e.toString() + "\n";
            StackTraceElement[] elements = e.getStackTrace();
            for(int i = 0; i < elements.length; ++i) {
                content += elements[i].toString() + "\n";
            }

            Toast.makeText(reactContext, "catch result:"+content, Toast.LENGTH_LONG).show();

            System.out.println("catch result:"+content);

//            setStatus(content);
//            dismissProgressDialog();
        }
    }

    @ReactMethod
    public void latestFirmwareVer(Promise promise){
        reactContextInit();
        String result =sourceRoot.substring(sourceRoot.length()-14,sourceRoot.length()-4);
        promise.resolve(result);
    }

   /* @ReactMethod
    public void updateFirmware(Promise promise){
        reactContextInit();
        //String path = "WPS32_Firmware_VFZZ_v4.01.00.08.hex";
        //String selectedfile = repositoryPath.replace(" ",""); //The uri with the location of the file
        //String encContent =  "/storage/emulated/0/WPS32_Firmware_VFZZ_v4.01.00.08.hex";
        Hashtable<String, Object> input = new Hashtable<String, Object>();
        input.put("encHexFilePath", "android/app/src/main/assets/WPS32_Firmware_VFZZ_v4.01.00.08.hex");
       //  Uri selectedfile = Uri.parse(repositoryPath.replace(" ","")); //The uri with the location of the file
       // System.out.println("selected Path:"+repositoryPath);
       // Hashtable<String, Object> input = new Hashtable<String, Object>();
       // input.put("encHexFilePath", Utils.getPathFromUri(reactContext, selectedfile));
        //Uri selectedfile = new Uri("android/app/src/main/assets/WPS32_Firmware_VFZZ_v4.01.00.08.hex") ; //The uri with the location of the file
        //input.put("encHexFilePath", Utils.getPathFromUri(this, selectedfile));
        input.put("vendorID", vendorID);
        input.put("appID", appID);
        input.put("vendorSecret", vendorSecret);
        input.put("appSecret", appSecret);
        input.put("forceUpdate", true);
        input.put("firmwareType", BBDeviceOTAController.FirmwareType.MAIN_PROCESSOR);

        //bbDeviceOTAController.getTargetVersionWithData(input);
        try {
            bbDeviceOTAController.startRemoteFirmwareUpdate(input);
            Log.d("EEEEE", input.toString());
        } catch (Exception e) {
            String content = e.toString() + "\n";
            System.out.println("catch:"+content);
        }
    }
*/

    @ReactMethod
    public void updateFirmware(Promise promise){
        reactContextInit();
        Hashtable<String, Object> input = new Hashtable<String, Object>();
       /* input.put("vendorID", vendorID);
        input.put("appID", appID);
        input.put("vendorSecret", vendorSecret);
        input.put("appSecret", appSecret);
        input.put("forceUpdate", true);
        input.put("firmwareType", "MAIN_PROCESSOR");*/
        //input.put("encHexFilePath", utils.getPathFromUri(reactContext, Uri.parse("/storage/emulated/0/WPS32_Firmware_VFZZ_v4.01.00.08.hex")));
        //input.put("encHexFilePath", Utils.getPathFromUri(reactContext, "content://com.android.providers.downloads.documents/document/msf%3A28892"));
        input.put("encHexFilePath", contentRoot);
        input.put("dekBDK", "000111222333444555666777888999AAABBBCCCDDDEEEFFF");
        try {
            Log.d("OTA","RemoteFirmwareUpdate"+input);
            // bbDeviceOTAController.startLocalFirmwareUpdateWithData(input);
            bbDeviceOTAController.startLocalFirmwareUpdateWithData(input);
        } catch (Exception e) {
            Log.d("OTA","RemoteFirmwareUpdatecatch"+e);



            String content = e.toString() + "\n";
            StackTraceElement[] elements = e.getStackTrace();
            for(int i = 0; i < elements.length; ++i) {
                content += elements[i].toString() + "\n";
            }
        }
    }


    //firmware update
    @ReactMethod
    public void setTargetFirmwareVersion(Promise promise){

        reactContextInit();

        String currentVer = "4.01.00.08";
        Log.d("OTA", "setTargetFirmwareVersion: currentVer"+currentVer);
        reactContextInit();
        Hashtable<String, Object> input = new Hashtable<String, Object>();
        input.put("vendorID", vendorID);
        input.put("vendorSecret", vendorSecret);
        input.put("appID", appID);
        input.put("appSecret", appSecret);
        input.put("firmwareVersion", currentVer);
        input.put("listType", BBDeviceOTAController.TargetVersionType.FIRMWARE);

        updateStaus = "Firmware";

        try {

            Log.d("OTA","setFirmwareTargetVersion"+input);
            bbDeviceOTAController.setTargetVersionWithData(input);
        } catch (Exception e) {
            Log.d("OTA","setTargetVersion"+e);

            if (updateStaus.equalsIgnoreCase("config")){
                WritableMap params = Arguments.createMap();
                params.putString("result","Failed".toUpperCase());
                reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                        .emit(ON_RETURN_SET_CONFIG_TARGET_VERSION_RESULT,params);
            }else {
                WritableMap params = Arguments.createMap();
                params.putString("result","Failed".toUpperCase());
                reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                        .emit(ON_RETURN_SET_FIRMWARE_TARGET_VERSION_RESULT,params);
            }

            String content = e.toString() + "\n";
            StackTraceElement[] elements = e.getStackTrace();
            for(int i = 0; i < elements.length; ++i) {
                content += elements[i].toString() + "\n";
            }

        }
    }

    @ReactMethod
    public void remoteFirmwareUpdate(Promise promise){

        reactContextInit();

// MAIN_PROCESSOR
        Hashtable<String, Object> input = new Hashtable<String, Object>();
        input.put("vendorID", vendorID);
        input.put("appID", appID);
        input.put("vendorSecret", vendorSecret);
        input.put("appSecret", appSecret);
        input.put("forceUpdate", true);
        input.put("firmwareType", "MAIN_PROCESSOR");
        updateStaus= "Firmware";

        try {
// createProgressDialog(Integer.parseInt("Remote Key Injection"));
            Log.d("OTA","RemoteFirmwareUpdate"+input);
            bbDeviceOTAController.startRemoteFirmwareUpdate(input);
        } catch (Exception e) {


            WritableMap params = Arguments.createMap();
            params.putString("result","failed");
            reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                    .emit(ON_RETURN_REMOTE_FIRMWARE_UPDATE,params);

            String content = e.toString() + "\n";
            StackTraceElement[] elements = e.getStackTrace();
            for(int i = 0; i < elements.length; ++i) {
                content += elements[i].toString() + "\n";
            }
// setStatus(content);
// dismissProgressDialog();
        }
    }

    //config update
    @ReactMethod
    public void setTargetConfig(Promise promise){

        reactContextInit();

        String currentVer = "VFZZ_Generic_v2";
        Log.d("OTA", "setTargetFirmwareVersion: currentVer"+currentVer);
        reactContextInit();
        Hashtable<String, Object> input = new Hashtable<String, Object>();
        input.put("vendorID", vendorID);
        input.put("vendorSecret", vendorSecret);
        input.put("appID", appID);
        input.put("appSecret", appSecret);
        //input.put("firmwareVersion", currentVer);
        input.put("listType", BBDeviceOTAController.TargetVersionType.CONFIG);
        input.put("deviceSettingVersion", currentVer);
        // input.put("terminalSettingVersion", currentVer);
//        //input.put("mainProcessorVersion", mainProcessorVersion);
//        //input.put("coprocessorVersion", coprocessorVersion);
//        //input.put("keyProfileName", keyProfileName);
        //input.put("listType", BBDeviceOTAController.TargetVersionType.CONFIG);

        updateStaus = "Config";

        try {

            Log.d("OTA","setConfigTargetVersion"+input);
            bbDeviceOTAController.setTargetVersionWithData(input);
        } catch (Exception e) {
            Log.d("OTA","setTargetVersion catch:"+e);


            if (updateStaus.equalsIgnoreCase("config")){
                WritableMap params = Arguments.createMap();
                params.putString("result","Failed".toUpperCase());
                reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                        .emit(ON_RETURN_SET_CONFIG_TARGET_VERSION_RESULT,params);
            }else {
                WritableMap params = Arguments.createMap();
                params.putString("result","Failed".toUpperCase());
                reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                        .emit(ON_RETURN_SET_FIRMWARE_TARGET_VERSION_RESULT,params);
            }

            String content = e.toString() + "\n";
            StackTraceElement[] elements = e.getStackTrace();
            for(int i = 0; i < elements.length; ++i) {
                content += elements[i].toString() + "\n";
            }

        }
    }
    @ReactMethod
    public void remoteConfigUpdate(Promise promise){

        reactContextInit();

// MAIN_PROCESSOR
        Hashtable<String, Object> input = new Hashtable<String, Object>();
        input.put("vendorID", vendorID);
        input.put("appID", appID);
        input.put("vendorSecret", vendorSecret);
        input.put("appSecret", appSecret);
        input.put("forceUpdate", true);
        updateStaus = "Config";

        try {
// createProgressDialog(Integer.parseInt("Remote Key Injection"));
            Log.d("OTA","RemoteConfigUpdate"+input);
            bbDeviceOTAController.startRemoteConfigUpdate(input);
        } catch (Exception e) {
            Log.d("OTA","RemoteConfigUpdate catch:"+e.getStackTrace());


            WritableMap params = Arguments.createMap();
            params.putString("result","failed");
            reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                    .emit(ON_RETURN_REMOTE_CONFIG_UPDATE,params);

            String content = e.toString() + "\n";
            StackTraceElement[] elements = e.getStackTrace();
            for(int i = 0; i < elements.length; ++i) {
                content += elements[i].toString() + "\n";
            }
// setStatus(content);
// dismissProgressDialog();
        }
    }



    private static WritableMap convertJsonToMap(JSONObject jsonObject) throws JSONException {
        WritableMap map = new WritableNativeMap();

        Iterator<String> iterator = jsonObject.keys();
        while (iterator.hasNext()) {
            String key = iterator.next();
            Object value = jsonObject.get(key);
            if (value instanceof JSONObject) {
                map.putMap(key, convertJsonToMap((JSONObject) value));
            } else if (value instanceof Boolean) {
                map.putBoolean(key, (Boolean) value);
            } else if (value instanceof Integer) {
                map.putInt(key, (Integer) value);
            } else if (value instanceof Double) {
                map.putDouble(key, (Double) value);
            } else if (value instanceof String) {
                map.putString(key, (String) value);
            } else {
                map.putString(key, value.toString());
            }
        }
        return map;
    }

    class BBDeviceControllerListener implements BBDeviceController.BBDeviceControllerListener, com.bbpos_integration.cardreaderservices.BBDeviceControllerListener {

        @Override
        public void onWaitingForCard(BBDeviceController.CheckCardMode checkCardMode) {
            WritableMap params = Arguments.createMap();
            params.putString(CHECK_CARD_MODE,""+checkCardMode);

            reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                    .emit(ON_WAITING_FOR_CARD,params);
        }

        @Override
        public void onWaitingReprintOrPrintNext() {

        }

        @Override
        public void onBTReturnScanResults(List<BluetoothDevice> foundDevices) {
            WritableArray array = Arguments.createArray();
            WritableMap params = Arguments.createMap();
            for(BluetoothDevice device: foundDevices){
                try {
                    JSONObject object = new JSONObject(gson.toJson(device));
                    WritableMap map = convertJsonToMap(object);
                    array.pushMap(map);

                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
            params.putArray(DEVICES,array);
            reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                    .emit(ON_BT_RETURN_SCAN_RESULTS,params);
        }

        @Override
        public void onBTScanTimeout() {

        }

        @Override
        public void onBTScanStopped() {

        }

        @Override
        public void onBTConnected(BluetoothDevice bluetoothDevice) {
            //register the event and pass device name
            WritableMap params = Arguments.createMap();

            params.putString(CONNECTED_DEVICE, bluetoothDevice.getAddress());
            reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                    .emit(ON_BT_CONNECTED,params);
        }

        @Override
        public void onBTDisconnected() {
            WritableMap params = Arguments.createMap();

            params.putString(DISCONNECTED,"disconnected");
            reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                    .emit(ON_BT_DISCONNECTED, params);
        }

        @Override
        public void onBTRequestPairing() {

        }

        @Override
        public void onUsbConnected() {

        }

        @Override
        public void onUsbDisconnected() {

        }

        @Override
        public void onSerialConnected() {

        }

        @Override
        public void onSerialDisconnected() {

        }

        @Override
        public void onReturnCheckCardResult(BBDeviceController.CheckCardResult checkCardResult, Hashtable<String, String> hashtable) {

            String cardResult = hashtable.toString();

            WritableMap params = Arguments.createMap();
            params.putString(CARD_RESULT, cardResult);

            reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                    .emit(ON_RETURN_CHECK_CARD_RESULT,params);
        }

        @Override
        public void onReturnCancelCheckCardResult(boolean isCancel) {
            reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                    .emit(ON_RETURN_CANCEL_CHECK_CARD, isCancel);
        }

        @Override
        public void onReturnDeviceInfo(Hashtable<String, String> deviceInfoTable) {
            WritableMap params = Arguments.createMap();
            params.putString(ON_DEVICE_INFO,"" + deviceInfoTable);
            params.putString("serialid","" + deviceInfoTable.get("bID"));
            params.putString("batteryPercentage","" + deviceInfoTable.get("batteryPercentage"));
            params.putString("uid","" + deviceInfoTable.get("uid"));
            params.putString("firmwareVersion","" + deviceInfoTable.get("firmwareVersion"));


            reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                    .emit(ON_RETURN_DEVICE_INFO,params);
        }

        @Override
        public void onReturnTransactionResult(BBDeviceController.TransactionResult transactionResult) {
            WritableMap params = Arguments.createMap();

            params.putString(TRANSACTION_RESULT,"" + transactionResult);

            reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                    .emit(ON_RETURN_TRANSACTION_RESULT,params);
        }

        @Override
        public void onReturnBatchData(String tlv) {
            Log.d("onReturnBatchData","onReturnBatchData"+tlv);
            WritableMap params = Arguments.createMap();

            Hashtable<String, String> decodeData = BBDeviceController.decodeTlv(tlv);
            params.putString(BATCH_DATA, decodeData.toString());

            reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                    .emit(ON_RETURN_BATCH_DATA,params);
        }

        @Override
        public void onReturnReversalData(String s) {

        }

        @Override
        public void onReturnAmountConfirmResult(boolean b) {

        }

        @Override
        public void onReturnPinEntryResult(BBDeviceController.PinEntryResult pinEntryResult, Hashtable<String, String> hashtable) {
            WritableMap params = Arguments.createMap();

            Boolean isPinEntered;

            if(pinEntryResult == BBDeviceController.PinEntryResult.ENTERED){
                isPinEntered = true;
            }else {
                isPinEntered = false;
            }

            params.putString("status", pinEntryResult.toString());
            params.putString("isPinEntered", "" + isPinEntered);

            reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                    .emit(ON_RETURN_PIN_ENTRY_RESULT,params);
        }

        @Override
        public void onReturnPrintResult(BBDeviceController.PrintResult printResult) {

        }

        @Override
        public void onReturnAccountSelectionResult(BBDeviceController.AccountSelectionResult accountSelectionResult, int i) {

        }

        @Override
        public void onReturnAmount(Hashtable<String, String> hashtable) {

        }

        @Override
        public void onReturnUpdateAIDResult(Hashtable<String, BBDeviceController.TerminalSettingStatus> hashtable) {

        }

        @Override
        public void onReturnUpdateGprsSettingsResult(boolean b, Hashtable<String, BBDeviceController.TerminalSettingStatus> hashtable) {

        }

        @Override
        public void onReturnUpdateTerminalSettingResult(BBDeviceController.TerminalSettingStatus terminalSettingStatus) {

        }

        @Override
        public void onReturnUpdateTerminalSettingsResult(Hashtable<String, BBDeviceController.TerminalSettingStatus> hashtable) {

        }

        @Override
        public void onReturnUpdateWiFiSettingsResult(boolean b, Hashtable<String, BBDeviceController.TerminalSettingStatus> hashtable) {

        }

        @Override
        public void onReturnUpdateDisplayStringResult(boolean b, String s) {
            
        }

        @Override
        public void onReturnReadAIDResult(Hashtable<String, Object> hashtable) {

        }

        @Override
        public void onReturnReadGprsSettingsResult(boolean b, Hashtable<String, Object> hashtable) {

        }

        @Override
        public void onReturnReadTerminalSettingResult(Hashtable<String, Object> hashtable) {

        }

        @Override
        public void onReturnReadWiFiSettingsResult(boolean b, Hashtable<String, Object> hashtable) {

        }

        @Override
        public void onReturnEnableAccountSelectionResult(boolean b) {

        }

        @Override
        public void onReturnEnableInputAmountResult(boolean b) {

        }

        @Override
        public void onReturnCAPKList(List<CAPK> list) {

        }

        @Override
        public void onReturnCAPKDetail(CAPK capk) {

        }

        @Override
        public void onReturnCAPKLocation(String s) {

        }

        @Override
        public void onReturnUpdateCAPKResult(boolean b) {

        }

        @Override
        public void onReturnRemoveCAPKResult(boolean b) {

        }

        @Override
        public void onReturnEmvReportList(Hashtable<String, String> hashtable) {

        }

        @Override
        public void onReturnEmvReport(String s) {

        }

        @Override
        public void onReturnDisableAccountSelectionResult(boolean b) {

        }

        @Override
        public void onReturnDisableInputAmountResult(boolean b) {

        }

        @Override
        public void onReturnPhoneNumber(BBDeviceController.PhoneEntryResult phoneEntryResult, String s) {

        }

        @Override
        public void onReturnEmvCardDataResult(boolean success, String tlv) {
            Log.d("onReturnEmvCardData","onReturnEmvCardDataResult"+success);
            WritableMap params = Arguments.createMap();
            Hashtable<String, String> decodeData;
            if(success){
                decodeData = BBDeviceController.decodeTlv(tlv);
            }else {
                decodeData = null;
            }

            params.putString(EMV_CARD_RESULT, decodeData.toString());

            reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                    .emit(ON_RETURN_EMV_CARD_DATA_RESULT,params);

        }

        @Override
        public void onReturnEmvCardNumber(boolean b, String s) {

        }

        @Override
        public void onReturnEncryptPinResult(boolean b, Hashtable<String, String> hashtable) {

        }

        @Override
        public void onReturnEncryptDataResult(boolean b, Hashtable<String, String> hashtable) {

        }

        @Override
        public void onReturnInjectSessionKeyResult(boolean b, Hashtable<String, String> hashtable) {

        }

        @Override
        public void onReturnPowerOnIccResult(boolean b, String s, String s1, int i) {

        }

        @Override
        public void onReturnPowerOffIccResult(boolean b) {

        }

        @Override
        public void onReturnApduResult(boolean b, Hashtable<String, Object> hashtable) {

        }

        @Override
        public void onRequestSelectApplication(ArrayList<String> arrayList) {

        }

        @Override
        public void onRequestSelectAccountType() {

        }

        @Override
        public void onRequestSetAmount() {

        }

        @Override
        public void onRequestPinEntry(BBDeviceController.PinEntrySource pinEntrySource) {
            reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                    .emit(ON_REQUEST_PIN_ENTRY, true);
        }

        @Override
        public void onReturnSetPinPadButtonsResult(boolean b) {

        }

        @Override
        public void onReturnSetPinPadOrientationResult(boolean b) {

        }

        @Override
        public void onReturnUpdateDisplaySettingsProgress(double v) {
            reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                    .emit("ON_RETURN_UPDATE_DISPLAY_PROGRESS",v);
        }

        @Override
        public void onReturnUpdateDisplaySettingsResult(boolean isSuccess, String message) {
            WritableMap params = Arguments.createMap();

            params.putString("Message", message);
            params.putString("IsSuccess", "" + isSuccess);

            reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                    .emit("onReturnUpdateDisplaySettingsResult", params);
        }

        @Override
        public void onRequestOnlineProcess(String s) {
            bbDeviceController.sendOnlineProcessResult("8A023030");
        }

        @Override
        public void onRequestTerminalTime() {

        }

        @Override
        public void onRequestDisplayText(BBDeviceController.DisplayText displayText, String s) {
            WritableMap params = Arguments.createMap();

            params.putString(DISPLAY_TEXT,displayText.toString());

            reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                    .emit(ON_REQUEST_DISPLAY_TEXT,params);
        }

        @Override
        public void onRequestDisplayAsterisk(int i) {

        }

        @Override
        public void onRequestDisplayLEDIndicator(BBDeviceController.ContactlessStatus contactlessStatus) {

        }

        @Override
        public void onRequestProduceAudioTone(BBDeviceController.ContactlessStatusTone contactlessStatusTone) {

        }

        @Override
        public void onRequestClearDisplay() {

        }

        @Override
        public void onRequestFinalConfirm() {
            bbDeviceController.sendFinalConfirmResult(true);
        }

        @Override
        public void onRequestPrintData(int i, boolean b) {

        }

        @Override
        public void onPrintDataCancelled() {

        }

        @Override
        public void onPrintDataEnd() {

        }

        @Override
        public void onBatteryLow(BBDeviceController.BatteryStatus batteryStatus) {

        }

        @Override
        public void onAudioDevicePlugged() {

        }

        @Override
        public void onAudioDeviceUnplugged() {

        }

        @Override
        public void onError(BBDeviceController.Error error, String message) {
            reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                    .emit("onError", message);
        }

        @Override
        public void onSessionInitialized() {

        }

        @Override
        public void onSessionError(BBDeviceController.SessionError sessionError, String s) {

        }

        @Override
        public void onAudioAutoConfigProgressUpdate(double v) {

        }

        @Override
        public void onAudioAutoConfigCompleted(boolean b, String s) {

        }

        @Override
        public void onAudioAutoConfigError(BBDeviceController.AudioAutoConfigError audioAutoConfigError) {

        }

        @Override
        public void onNoAudioDeviceDetected() {

        }

        @Override
        public void onDeviceHere(boolean isHere) {
            WritableMap params = Arguments.createMap();

            params.putBoolean(DEVICE_HERE, isHere);
            reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                    .emit(ON_BT_DEVICE_HERE,params);
        }

        @Override
        public void onPowerDown() {

        }

        @Override
        public void onPowerButtonPressed() {

        }

        @Override
        public void onDeviceReset(boolean b, BBDeviceController.DeviceResetReason deviceResetReason) {

        }

        @Override
        public void onDeviceReset() {

        }

        @Override
        public void onEnterStandbyMode() {

        }

        @Override
        public void onReturnNfcDataExchangeResult(boolean b, Hashtable<String, String> hashtable) {

        }

        @Override
        public void onReturnNfcDetectCardResult(BBDeviceController.NfcDetectCardResult nfcDetectCardResult, Hashtable<String, Object> hashtable) {

        }

        @Override
        public void onReturnControlLEDResult(boolean b, String s) {

        }

        @Override
        public void onReturnVasResult(BBDeviceController.VASResult vasResult, Hashtable<String, Object> hashtable) {

        }

        @Override
        public void onRequestStartEmv() {

        }

        @Override
        public void onDeviceDisplayingPrompt() {

        }

        @Override
        public void onRequestKeypadResponse() {

        }

        @Override
        public void onReturnDisplayPromptResult(BBDeviceController.DisplayPromptResult displayPromptResult) {

        }

        @Override
        public void onReturnFunctionKey(BBDeviceController.FunctionKey functionKey) {

        }

        @Override
        public void onBarcodeReaderConnected() {

        }

        @Override
        public void onBarcodeReaderDisconnected() {

        }

        @Override
        public void onReturnBarcode(String s) {

        }
    }

    class BBDeviceOTAControllerListener implements BBDeviceOTAController.BBDeviceOTAControllerListener{

        @Override
        public void onReturnRemoteKeyInjectionResult(BBDeviceOTAController.OTAResult otaResult, String s) {
            Log.d("REMOTEFW", "onReturnRemoteKeyInjectionResult: " + otaResult);
            Log.d("REMOTEFWs", "onReturnRemoteKeyInjectionResult: " + s);
        }

        @Override
        public void onReturnRemoteFirmwareUpdateResult(BBDeviceOTAController.OTAResult otaResult, String s) {
            Log.d("REMOTEFW", "onReturnRemoteFirmwareUpdateResult: " + otaResult);
            Log.d("REMOTEFWRES", "onReturnRemoteFirmwareUpdateResult: " + s);
            WritableMap params = Arguments.createMap();
            params.putString("result",otaResult.toString());
            reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                    .emit(ON_RETURN_REMOTE_FIRMWARE_UPDATE,params);
        }

        @Override
        public void onReturnRemoteConfigUpdateResult(BBDeviceOTAController.OTAResult otaResult, String s) {
            Log.d("REMOTEFW", "onReturnRemoteConfigUpdateResult: " + otaResult);
            Log.d("REMOTEFWS", "onReturnRemoteConfigUpdateResult: " + s);
            WritableMap params = Arguments.createMap();
            params.putString("result",otaResult.toString());
            reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                    .emit(ON_RETURN_REMOTE_CONFIG_UPDATE,params);
        }

        @Override
        public void onReturnLocalFirmwareUpdateResult(BBDeviceOTAController.OTAResult otaResult, String s) {
            Log.d("REMOTEFW", "onReturnLocalFirmwareUpdateResult: " + otaResult);
            Log.d("REMOTEFWS", "onReturnLocalFirmwareUpdateResult: " + s);
        }

        @Override
        public void onReturnLocalConfigUpdateResult(BBDeviceOTAController.OTAResult otaResult, String s) {

        }

        @Override
        public void onReturnOTAProgress(double v) {
            Log.d("REMOTEFW", "onReturnOTAProgress: " + v);
            WritableMap params = Arguments.createMap();
            int result = (int) v;
            if (updateStaus.equalsIgnoreCase("Config")){
                params.putString("progress", "Config Updating  : "+String.valueOf(result)+"%");
            }else {
                params.putString("progress", "Firmware Updating  : "+String.valueOf(result)+"%");
            }

            reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                    .emit(ON_RETURNE_OTA_PROGRESS,params);
        }

        @Override
        public void onReturnTargetVersionResult(BBDeviceOTAController.OTAResult otaResult, Hashtable<String, String> hashtable) {
            Log.d("REMOTEFW", "onReturnTargetVersionResult: " + otaResult);
        }

        @Override
        public void onReturnTargetVersionListResult(BBDeviceOTAController.OTAResult otaResult, List<Hashtable<String, String>> list, String s) {
            Log.d("REMOTEFW", "onReturnTargetVersionListResult: " + otaResult);
        }

        @Override
        public void onReturnSetTargetVersionResult(BBDeviceOTAController.OTAResult otaResult, String s) {
            Log.d("REMOTEFW", "onReturnSetTargetVersionResult: " + otaResult);

            if (updateStaus.equalsIgnoreCase("config")){
                WritableMap params = Arguments.createMap();
                params.putString("result",otaResult.toString());
                reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                        .emit(ON_RETURN_SET_CONFIG_TARGET_VERSION_RESULT,params);
            }else {
                WritableMap params = Arguments.createMap();
                params.putString("result",otaResult.toString());
                reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                        .emit(ON_RETURN_SET_FIRMWARE_TARGET_VERSION_RESULT,params);
            }


        }
    }


  
}